{"version":3,"sources":["history.js","core/BoundComponent.js","PageSizeController.js","core/util/CallbackDispatcher.js","pages/home/HomePage.js","core/util/ObjectUtils.js","core/component/AbstractInput.js","core/component/InputText.js","core/component/InputNumber.js","core/component/DataSet.js","pages/dataSet/DataSetPage.js","core/component/dynamicScroll/ScrollViewEntry.js","core/component/dynamicScroll/ScrollViewContainer.js","core/component/dynamicScroll/ScrollViewPort.js","pages/dynamicScroll/DynamicScrollPage.js","AppRoutes.js","AppNav.js","App.js","serviceWorker.js","index.js"],"names":["customHistory","createBrowserHistory","forceRefresh","BoundComponent","props","ignoreMethods","methods","Object","getOwnPropertyNames","getPrototypeOf","self","forEach","methodName","indexOf","toLowerCase","bind","Component","pageSizeController","size","width","height","handleWindowResized","window","addEventListener","document","this","newWidth","innerWidth","documentElement","clientWidth","body","newHeight","innerHeight","clientHeight","dispatch","subscriptions","subscribe","unsubscribe","uuid","callback","event","invalidSubscriptions","entries","entry","push","HomePage","splitPath","path","split","filter","piece","length","console","error","ObjectUtils","setValue","object","value","pathMembers","pointer","shift","getValue","AbstractInput","state","property","handleOnChange","effectiveChangeValue","handleOnBlur","getBaseProps","getInputValue","e","newValue","target","applyOnBlur","setState","tmpValue","log","newValueEvent","id","source","validateChange","onChange","className","onBlur","propTypes","PropTypes","string","func","bool","InputText","inputProps","assign","type","placeholder","oneOfType","array","InputNumber","FIELD_TYPES","FIELD","SET_TYPES","SETS","ArrayTestSet","removeData","insertData","copyLastOnInsertion","columns","label","field","MapTestSet","defaultKey","baseElement","fieldA","undefined","fieldB","DeliveryOrderInner","singleSelection","DataSet","columnsArea","set","columnProps","columnArea","keyMap","effectiveFieldChange","elementId","refreshRefsWithProperties","entryId","find","c","externalName","propertyValue","store","getExternalItem","el","map","entryIndex","dataSource","keyContent","elementKey","onChangeCallback","dataset","removeid","removeConfirmation","warn","effectiveRemoveElement","tempId","Number","splice","_","cloneDeep","newObject","keys","sort","a","b","maxLength","last","Array","generateNewObject","mapKeys","lastKey","newKey","values","refs","fieldRef","reloadField","dispatcher","insertButton","addInsertButton","onClick","handleInsertNewElement","style","renderTableHead","renderTableBody","key","elements","data-element","columnsForData","orderedKeyList","keyList","customKeySortFunc","sortFieldType","sortType","localeCompare","mapKey","sortField","MAX_SAFE_INTEGER","elementData","index","column","ref","validateFieldChange","handleChangeElementField","onClickOnElementCallback","data-removeid","handleRemoveElement","isRequired","any","isScrollable","DataSetPage","testSubject","arrayContent","mapContent","arrayVersion","mapVersion","name","collapsed","enableClipboard","src","ScrollViewEntry","top","setTop","newTop","EntryView","entryView","entryClass","entryHeight","position","properties","entryProperties","ScrollViewContainer","handleScroll","updateViewPortSize","viewPortRect","lastRender","pos","lastTop","scrollContainer","rect","getBoundingClientRect","onlyUpdateEntry","list","containerHeight","upperContainerMargin","viewPortHeight","viewPortTop","visibleEntriesQuantity","Math","ceil","containerScrolled","initialRenderListPosition","trunc","scrollingState","onNeedResetScroll","i","refId","keyId","entryRefKey","scrollContainerClass","ScrollViewPort","viewPort","scrollTop","onlyUpdateEntries","overflow","viewPortClass","onScroll","handleOnNeedResetScroll","number","DynamicScrollPage","fixedList","changeListSize","dynamicList","dynamicListRef","fixesList","dynamicListSize","listHeight","PageSizeController","getCurrentPageSize","newSize","pop","newLength","handlePageResize","paddingTop","handleChangeDynamicListSize","ListEntry","display","border","flexGrow","Base_Routes","url","icon","component","params","exact","appRoutes","getRoutes","AppNav","navRef","open","hover","navItems","AppRoutes","item","to","activeClassName","handleMouseClick","onMouseEnter","onMouseLeave","App","routes","AppRotes","route","Boolean","location","hostname","match","ReactDOM","render","history","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5f6f4d2a.chunk.js","sourcesContent":["import createBrowserHistory from 'history/createBrowserHistory'\n\nconst customHistory = createBrowserHistory({forceRefresh: true});\nexport default customHistory;","import {Component} from 'react';\n\nclass BoundComponent extends Component {\n    constructor(props) {\n        super(props);\n\n        let ignoreMethods = [\"constructor\", \"render\", \"componentWillReceiveProps\", \"componentWillMount\", \"componentDidMount\", \"componentWillUpdate\", \"componentDidUpdate\"];\n        let methods = Object.getOwnPropertyNames(Object.getPrototypeOf(this));\n        let self = this;\n\n        methods.forEach(function(methodName) {\n            if(typeof self[methodName] === \"function\" && ignoreMethods.indexOf(methodName.toLowerCase()) === -1 ) {\n                self[methodName] = self[methodName].bind(self);\n            }\n        });\n    }\n}\n\nexport default BoundComponent;","import CallbackDispatcher from './core/util/CallbackDispatcher';\n\nclass PageSizeController extends CallbackDispatcher {\n\n    constructor () {\n        super();\n\n        this.size = {width: 0, height: 0};\n\n        this.handleWindowResized = this.handleWindowResized.bind(this);\n\n        window.addEventListener(\"resize\", this.handleWindowResized);\n        document.addEventListener(\"ready\", this.handleWindowResized);\n        this.handleWindowResized();\n    }\n\n    getCurrentPageSize() {\n        return this.size;\n    }\n\n    handleWindowResized() {\n        let newWidth = window.innerWidth\n            || document.documentElement.clientWidth\n            || document.body.clientWidth;\n\n        let newHeight = window.innerHeight\n            || document.documentElement.clientHeight\n            || document.body.clientHeight;\n\n        this.size = {width: newWidth, height: newHeight};\n        this.dispatch({size: this.size});\n    }\n}\n\nconst pageSizeController = new PageSizeController();\nexport default pageSizeController;","export default class CallbackDispatcher {\n\n    constructor(){\n        this.subscriptions = {};\n\n        this.subscribe = this.subscribe.bind(this);\n        this.unsubscribe = this.unsubscribe.bind(this);\n        this.dispatch = this.dispatch.bind(this);\n    }\n\n    subscribe(uuid, callback) {\n        this.subscriptions[uuid] = callback;\n    }\n\n    unsubscribe(uuid) {\n        delete this.subscriptions[uuid];\n    }\n\n    dispatch(event) {\n        let invalidSubscriptions = [];\n        Object.entries(this.subscriptions).forEach((entry) => {\n            let uuid = entry[0];\n            let callback = entry[1];\n\n            if (callback && typeof callback === \"function\") {\n                callback(event);\n            } else {\n                invalidSubscriptions.push(uuid);\n            }\n        }, this);\n\n        invalidSubscriptions.forEach((uuid) => {\n            delete this.subscriptions[uuid];\n        }, this)\n    }\n}","import React from 'react';\nimport BoundComponent from \"../../core/BoundComponent\";\n\nclass HomePage extends BoundComponent {\n\n    render() {\n        return (\n            <div>\n                <h1>Home</h1>\n            </div>\n        )\n    }\n}\n\nexport default HomePage;","\nfunction splitPath(path) {\n    if (!(typeof path === 'string')) {\n        console.error(\"Only strings are accepted into path\");\n        return;\n    }\n\n    let splitterRegex = /[\\.\\[\\]]/;\n    return path.split(splitterRegex).filter((piece) => piece.length > 0);\n}\n\nfunction setValue(object, path, value) {\n    let pathMembers = splitPath(path);\n\n    if (pathMembers) {\n        let pointer = object;\n        while (pathMembers.length > 1) {\n            let currentPath = pathMembers.shift();\n            pointer = pointer[currentPath];\n        }\n        let currentPath = pathMembers.shift();\n        pointer[currentPath] = value;\n    }\n}\n\nfunction getValue(object, path) {\n    let pathMembers = splitPath(path);\n\n    if (pathMembers) {\n        let pointer = object;\n        while (pathMembers.length > 1) {\n            let currentPath = pathMembers.shift();\n            pointer = pointer[currentPath];\n        }\n        let currentPath = pathMembers.shift();\n        return pointer[currentPath];\n    }\n}\n\nconst ObjectUtils = {\n    splitPath: splitPath,\n    setValue: setValue,\n    getValue: getValue\n};\n\nexport default ObjectUtils;","import BoundComponent from \"../BoundComponent\";\nimport ObjectUtils from \"../util/ObjectUtils\";\nimport PropTypes from \"prop-types\";\n\nclass AbstractInput extends BoundComponent {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            value: props.property ? ObjectUtils.getValue(props.entry, props.property) : props.entry\n        };\n\n        this.handleOnChange = this.handleOnChange.bind(this);\n        this.effectiveChangeValue = this.effectiveChangeValue.bind(this);\n        this.handleOnBlur = this.handleOnBlur.bind(this);\n        this.getBaseProps = this.getBaseProps.bind(this);\n        this.getInputValue = this.getInputValue.bind(this);\n    }\n\n    handleOnChange(e) {\n        let newValue = e.target.value;\n        if (!this.props.applyOnBlur) {\n            this.effectiveChangeValue(newValue);\n        } else {\n            this.setState({tmpValue: newValue});\n        }\n    }\n\n    handleOnBlur(e) {\n        console.log(e);\n        if (this.props.applyOnBlur) {\n            this.effectiveChangeValue(this.state.tmpValue);\n        }\n    }\n\n    effectiveChangeValue(value) {\n        let newValueEvent = {target: {id: this.props.id, source: this.props.source, value: value}};\n\n        if (this.props.validateChange && !this.props.validateChange(newValueEvent)) {\n            this.setState({tmpValue: this.state.value});\n            return;\n        }\n\n        if (this.props.property) {\n            ObjectUtils.setValue(this.props.entry, this.props.property, value);\n        }\n        this.setState({value: value, tmpValue: value});\n        if (this.props.onChange) {\n            this.props.onChange(newValueEvent);\n        }\n    }\n\n    getBaseProps() {\n        return ({\n            className:\"input\",\n            value: this.getInputValue(),\n            onChange: this.handleOnChange,\n            onBlur: this.handleOnBlur\n        });\n    }\n\n    getInputValue() {\n        return this.state.tmpValue ? this.state.tmpValue : this.state.value;\n    }\n\n}\n\nAbstractInput.propTypes = {\n    property: PropTypes.string,\n    onChange: PropTypes.func,\n    validateChange: PropTypes.func,\n    applyOnBlur: PropTypes.bool\n};\n\nexport default AbstractInput;","import React from 'react';\nimport AbstractInput from \"./AbstractInput\";\nimport PropTypes from 'prop-types';\n\nclass InputText extends AbstractInput {\n\n    render() {\n        let inputProps = Object.assign(this.getBaseProps(), {type: \"text\", placeholder: \"abc\"});\n        if (this.props.className) {\n            inputProps.className += \" \" + this.props.className;\n        }\n        if (this.props.placeholder) {\n            inputProps.placeholder = this.props.placeholder;\n        }\n\n        return (\n            <input  {...inputProps} />\n        )\n    }\n}\n\nInputText.propTypes = {\n    entry: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.object,\n        PropTypes.array\n    ]),\n    property: PropTypes.string,\n    onChange: PropTypes.func\n};\n\nexport default InputText;","import React from 'react';\nimport AbstractInput from \"./AbstractInput\";\nimport PropTypes from 'prop-types';\n\nclass InputNumber extends AbstractInput {\n\n    render() {\n        let inputProps = Object.assign(this.getBaseProps(), {type: \"number\", placeholder: \"123\"});\n        if (this.props.className) {\n            inputProps.className += \" \" + this.props.className;\n        }\n        if (this.props.placeholder) {\n            inputProps.placeholder = this.props.placeholder;\n        }\n\n        return (\n            <input  {...inputProps} />\n        )\n    }\n}\n\nInputNumber.propTypes = {\n    entry: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.object,\n        PropTypes.array\n    ]),\n    property: PropTypes.string,\n    onChange: PropTypes.func\n};\n\nexport default InputNumber;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport BoundComponent from \"./../BoundComponent\";\nimport ObjectUtils from './../util/ObjectUtils';\nimport _ from 'lodash';\n\nimport InputText from \"./InputText\";\nimport InputNumber from \"./InputNumber\";\n\nconst FIELD_TYPES = {\n    LABEL: \"Label\",\n    NUMBER: \"Number\",\n    TEXT: \"Text\"\n};\n\nconst FIELD = {\n    CONTENT: \"CONTENT\",\n    CONTENT_ARRAY: \"CONTENT_ARRAY\",\n    CONTENT_TEXT: \"CONTENT_TEXT\",\n    MAP_KEY: \"MAP_KEY\"\n};\n\nexport const SET_TYPES = {\n    SEQUENTIAL_MAP: \"Sequential Map\",\n    ARRAY: \"Array\",\n    MAP: \"Map\",\n    DATA_SET: \"DataSet\"\n};\n\nexport const SETS = {\n    ArrayTestSet: {\n        type: SET_TYPES.ARRAY,\n        removeData: true,\n        insertData: true,\n        copyLastOnInsertion: true,\n        columns: [\n            {label: \"FieldA\", field: \"fieldA\", type: FIELD_TYPES.TEXT},\n            {label: \"FieldB\", field: \"fieldB\", type: FIELD_TYPES.NUMBER},\n            {label: \"FieldC\", field: \"fieldC\", type: FIELD_TYPES.TEXT}]\n    },\n    MapTestSet: {\n        type: SET_TYPES.MAP,\n        defaultKey: \"keyOne\",\n        removeData: true,\n        insertData: true,\n        copyLastOnInsertion: true,\n        baseElement: {fieldA: undefined, fieldB: undefined},\n        columns: [\n            {label: \"Key\", field: FIELD.MAP_KEY, type: FIELD_TYPES.TEXT},\n            {label: \"FieldA\", field: \"fieldA\", type: FIELD_TYPES.TEXT},\n            {label: \"FieldB\", field: \"fieldB\", type: FIELD_TYPES.TEXT},\n        ]\n    },\n    DeliveryOrderInner: {\n        type: SET_TYPES.ARRAY,\n        removeData: true,\n        insertData: true,\n        columns: [\n            {label: \"Deliverable\", field: \"deliverable\", type: FIELD_TYPES.TEXT, singleSelection: true},\n            {label: \"Weight\", field: \"weight\", type: FIELD_TYPES.NUMBER}]\n    }\n};\n\nclass DataSet extends BoundComponent {\n\n    constructor(props) {\n        super(props);\n\n        let self = this;\n        this.columnsArea = 100;\n        if (props.set.removeData) {\n            this.columnsArea -= 5;\n        }\n        props.set.columns.forEach(function (columnProps) {\n            if (columnProps.width) {\n                self.columnsArea -= columnProps.width;\n            }\n        });\n        this.columnArea = this.columnsArea / props.set.columns.length;\n        this.keyMap = {};\n    }\n\n    handleChangeElementField(e) {\n        this.effectiveFieldChange(e.target.source.elementId, e.target.source.field, e.target.value);\n        this.refreshRefsWithProperties();\n    }\n\n    handleChangeElementFieldSelect(e) {\n        let field = e.target.source.field;\n        let entryId = e.target.source.elementId;\n\n        let columnProps = this.props.set.columns.find(function (c) {\n            return c.field === field\n        });\n        if (columnProps) {\n\n            let externalName = columnProps.externalName || columnProps.field;\n            if (columnProps.propertyValue) {\n                if (columnProps.singleSelection) {\n                    this.effectiveFieldChange(entryId, field, this.props.store.getExternalItem(externalName, e.target.value));\n                } else {\n                    let value = [];\n                    let self = this;\n                    e.target.value.forEach(function (el) {\n                        value.push(self.props.store.getExternalItem(externalName, el.value))\n                    });\n\n                    this.effectiveFieldChange(entryId, field, value);\n                }\n            } else {\n                if (columnProps.singleSelection) {\n                    this.effectiveFieldChange(entryId, field, e.target.value);\n                } else {\n                    this.effectiveFieldChange(entryId, field, e.target.value.map(function (el) {\n                        return el.value;\n                    }));\n                }\n            }\n        }\n    }\n\n    effectiveFieldChange(entryIndex, field, value) {\n        if (field === \"MAP_KEY\") {\n            if (this.props.set.type === SET_TYPES.MAP || this.props.set.type === SET_TYPES.SEQUENTIAL_MAP) {\n\n                let exists = value in this.props.dataSource;\n                if (!exists) {\n                    let keyContent = this.props.dataSource[entryIndex];\n                    let elementKey = this.keyMap[entryIndex];\n\n                    delete this.props.dataSource[entryIndex];\n                    delete this.keyMap[entryIndex];\n\n                    this.props.dataSource[value] = keyContent;\n                    this.keyMap[value] = elementKey;\n\n                } else {\n                    console.error(\"Key already exists\");\n                }\n            }\n        } else {\n            if (field.indexOf(\"CONTENT\") >= 0) {\n                this.props.dataSource[entryIndex] = value;\n            } else {\n                //ObjectUtils.setValue(this.props.dataSource[entryIndex], field, value);\n            }\n        }\n        if (this.props.onChangeCallback !== undefined) {\n            this.props.onChangeCallback(entryIndex, this.props.dataSource);\n        }\n        this.setState({});\n    }\n\n    validateFieldChange(e) {\n        let field = e.target.source.field;\n        let newValue = e.target.value;\n\n        if (field === \"MAP_KEY\") {\n            if (this.props.set.type === SET_TYPES.MAP || this.props.set.type === SET_TYPES.SEQUENTIAL_MAP) {\n                if (newValue in this.props.dataSource) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    handleRemoveElement(e) {\n        let elementId = e.target.dataset.removeid;\n\n        if (this.props.set.removeConfirmation) {\n            //TODO: Implement popup message\n            console.warn(\"//TODO: Implement popup message\");\n            this.effectiveRemoveElement(elementId);\n            // let self = this;\n            // let confirmationString = this.props.set.removeConfirmation.replace(/%id/g, elementId);\n            // FlashDialogHelper.addConfirm(confirmationString, function (confirm) {\n            //     if (confirm) {\n            //         self.effectiveRemoveElement(elementId);\n            //     }\n            // })\n        } else {\n            this.effectiveRemoveElement(elementId);\n        }\n    }\n\n    effectiveRemoveElement(elementId) {\n        switch (this.props.set.type) {\n            case SET_TYPES.SEQUENTIAL_MAP:\n\n                var tempId = Number(elementId);\n                while (this.props.dataSource[tempId + 1]) {\n                    this.props.dataSource[tempId] = this.props.dataSource[tempId + 1];\n                    tempId++;\n                }\n                delete this.props.dataSource[tempId];\n                break;\n            case SET_TYPES.ARRAY:\n                this.props.dataSource.splice(elementId, 1);\n\n                break;\n            default:\n                delete this.props.dataSource[elementId];\n        }\n        if (this.props.onChangeCallback !== undefined) {\n            this.props.onChangeCallback(elementId, undefined, \"DELETE\");\n        }\n        this.setState({});\n    }\n\n    generateNewObject() {\n        if (this.props.set.baseElement) {\n            return _.cloneDeep(this.props.set.baseElement);\n        }\n\n        var newObject = {};\n        this.props.set.columns.forEach(function (columnProps) {\n            if (columnProps.field === FIELD.CONTENT_ARRAY) {\n                newObject = [];\n            } else if (columnProps.field === FIELD.CONTENT_TEXT) {\n                newObject = \"\";\n            } else if (columnProps.field === FIELD.CONTENT) {\n                newObject = {};\n            } else if (columnProps.field !== FIELD.MAP_KEY) {\n                ObjectUtils.setValue(newObject, columnProps.field, undefined);\n            }\n        });\n        return newObject;\n    }\n\n    handleInsertNewElement() {\n\n        switch (this.props.set.type) {\n            case SET_TYPES.SEQUENTIAL_MAP:\n\n                let keys = Object.keys(this.props.dataSource).sort(function (a, b) {\n                    return Number(a) - Number(b);\n                });\n                if (keys.length > 0 && ((this.props.set.maxLength && this.props.set.maxLength > keys.length) || !this.props.set.maxLength)) {\n                    var last = keys[keys.length - 1];\n\n                    last++;\n                    if (this.props.set.copyLastOnInsertion) {\n                        if (this.props.dataSource[last - 1] instanceof Array) {\n                            this.props.dataSource[last] = _.cloneDeep(this.props.dataSource[last - 1]);\n                        } else if (typeof this.props.dataSource[last - 1] === \"string\" || typeof this.props.dataSource[last - 1] === \"number\") {\n                            this.props.dataSource[last] = _.cloneDeep(this.props.dataSource[last - 1]);\n                        } else {\n                            this.props.dataSource[last] = _.cloneDeep(this.props.dataSource[last - 1]);\n                        }\n                    } else {\n                        this.props.dataSource[last] = this.generateNewObject();\n                    }\n                } else {\n                    this.props.dataSource[this.props.set.defaultKey || 0] = this.generateNewObject();\n                }\n\n                break;\n            case SET_TYPES.MAP:\n\n                let mapKeys = Object.keys(this.props.dataSource).sort();\n                if (mapKeys.length > 0) {\n                    var lastKey = mapKeys[mapKeys.length - 1];\n\n                    if (typeof this.props.set.defaultKey === \"number\") {\n                        lastKey = Number(lastKey);\n                    }\n\n                    var newKey = lastKey;\n                    if (typeof lastKey === \"string\") {\n                        newKey += \" New\";\n                    } else {\n                        newKey += 1;\n                    }\n                    if (this.props.set.copyLastOnInsertion) {\n                        if (this.props.dataSource[lastKey] instanceof Array) {\n                            this.props.dataSource[newKey] = _.cloneDeep(this.props.dataSource[lastKey]);\n                        } else if (typeof this.props.dataSource[lastKey] === \"string\" || typeof this.props.dataSource[lastKey] === \"number\") {\n                            this.props.dataSource[newKey] = _.cloneDeep(this.props.dataSource[lastKey]);\n                        } else {\n                            this.props.dataSource[newKey] = _.cloneDeep(this.props.dataSource[lastKey]);\n                        }\n                    } else {\n                        this.props.dataSource[newKey] = this.generateNewObject();\n                    }\n                } else {\n                    this.props.dataSource[this.props.set.defaultKey || \"new\"] = this.generateNewObject();\n                }\n\n                break;\n            default:\n                this.props.dataSource.push(this.generateNewObject());\n        }\n        if (this.props.onChangeCallback !== undefined) {\n            this.props.onChangeCallback(this.props.dataSource.length - 1, undefined, \"ADD\");\n        }\n        this.setState({});\n    }\n\n    refreshRefsWithProperties() {\n        Object.values(this.refs).forEach((fieldRef) => {\n            if (fieldRef && \"reloadField\" in fieldRef) {\n                fieldRef.reloadField();\n            }\n        });\n    }\n\n    render() {\n\n        if (this.props.dispatcher) {\n            this.props.dispatcher.subscribe(this.props.id, () => {\n                this.setState({})\n            });\n        }\n\n        let label = this.props.label ? <div className=\"column is-full\"><h5 className=\"title is-5\">{this.props.label}</h5></div> : \"\";\n        let insertButton = \"\";\n        if (this.props.set.insertData) {\n\n            var addInsertButton = true;\n            if (this.props.set.maxLength) {\n                if (this.props.set.type === SET_TYPES.ARRAY) {\n                    addInsertButton = this.props.dataSource.length < this.props.set.maxLength;\n                } else {\n                    addInsertButton = Object.keys(this.props.dataSource).length < this.props.set.maxLength;\n                }\n            }\n\n            if (addInsertButton) {\n                insertButton = <div className=\"column is-full\">\n                    <button className=\"button is-primary is-small\"\n                            onClick={this.handleInsertNewElement}>\n                        Add\n                    </button>\n                </div>;\n            }\n        }\n\n        return (\n            <div id={this.props.id} className=\"data-set\">\n                <div className=\"columns\">\n                    <div className=\"column is-full\">\n                        {label}\n                    </div>\n                </div>\n                <div className=\"columns\">\n                    <div className=\"column is-full\">\n                        <table className=\"table\" style={{width: \"100%\"}}>\n                            <thead>\n                            {\n                                this.renderTableHead()\n                            }\n                            </thead>\n                            <tbody>\n                            {\n                                this.renderTableBody()\n                            }\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n                <div className=\"columns\">\n                    {insertButton}\n                </div>\n            </div>\n        );\n    }\n\n    renderTableHead() {\n        let self = this;\n        let columns = [];\n        this.props.set.columns.forEach(function (columnProps) {\n            let width = columnProps.width || self.columnArea;\n            columns.push(<th key={columnProps.field} width={width + \"%\"}>{columnProps.label}</th>);\n        });\n        if (this.props.set.removeData) {\n            columns.push(<th key=\"RemoveDataColumn\" width=\"3%\"></th>);\n        }\n\n        return (\n            <tr>\n                {columns}\n            </tr>\n        );\n    }\n\n    renderTableBody() {\n\n        let elements = [];\n        let self = this;\n\n        switch (this.props.set.type) {\n            case SET_TYPES.SEQUENTIAL_MAP:\n                for (var key in this.props.dataSource) {\n                    elements.push(<tr key={key}\n                                      data-element={key}>{this.columnsForData(this.props.dataSource[key], key)}</tr>);\n                }\n\n                break;\n            case SET_TYPES.MAP:\n                let keyList = Object.keys(this.props.dataSource);\n\n                let orderedKeyList;\n                if (this.props.customKeySortFunc) {\n                    orderedKeyList = keyList.sort(this.props.customKeySortFunc);\n                } else if (this.props.set.sortFieldType) {\n                    let sortType = this.props.set.sortFieldType;\n                    orderedKeyList = keyList.sort((a, b) => {\n                        if (sortType === FIELD_TYPES.NUMBER) {\n                            let numberA = Number(a);\n                            let numberB = Number(b);\n                            return numberA - numberB;\n                        } else {\n                            return a.localeCompare(b);\n                        }\n                    });\n                } else {\n                    orderedKeyList = keyList.sort();\n                }\n\n                orderedKeyList.forEach(function (mapKey) {\n                    if (!self.keyMap[mapKey]) {\n                        self.keyMap[mapKey] = mapKey;\n                    }\n\n                    elements.push(<tr key={self.keyMap[mapKey]}\n                                      data-element={mapKey}>{self.columnsForData(self.props.dataSource[mapKey], mapKey, self.keyMap[mapKey])}</tr>);\n                });\n\n                break;\n            default:\n                var sortType = this.props.set.sortFieldType;\n                var sortField = this.props.set.sortField;\n                if (this.props.set.sortField) {\n                    this.props.dataSource.sort(function (a, b) {\n                        if (sortType === FIELD_TYPES.NUMBER) {\n                            let numberA = Number(ObjectUtils.getValue(a, sortField)) || Number.MAX_SAFE_INTEGER;\n                            let numberB = Number(ObjectUtils.getValue(b, sortField)) || Number.MAX_SAFE_INTEGER;\n                            return numberA - numberB;\n                        } else {\n                            return a[ObjectUtils.getValue(a, sortField)].localeCompare(ObjectUtils.getValue(b, sortField));\n                        }\n                    })\n                }\n\n                this.props.dataSource.forEach(function (elementData, index) {\n                    elements.push(<tr key={sortField ? elementData[sortField] + \"_\" + index : index}\n                                      data-element={index}>{self.columnsForData(elementData, index)}</tr>);\n                });\n\n        }\n        return (elements);\n    }\n\n    columnsForData(elementData, elementId, elementKey) {\n        let columns = [];\n        let self = this;\n        this.props.set.columns.forEach(function (columnProps) {\n\n            let column;\n            let source = {elementId: elementId, field: columnProps.field};\n\n            let value = elementData;\n            let property = columnProps.field;\n\n            if (columnProps.field === FIELD.MAP_KEY) {\n                value = elementId;\n            }\n            if (columnProps.field === FIELD.MAP_KEY ||\n                columnProps.field === FIELD.CONTENT_TEXT ||\n                columnProps.field === FIELD.CONTENT_ARRAY ||\n                columnProps.field === FIELD.CONTENT) {\n                property = undefined;\n            }\n\n            switch (columnProps.type) {\n                case FIELD_TYPES.TEXT:\n                    column = <InputText id={\"el-\" + columnProps.field + \"-\" + elementId}\n                                        ref={\"el-\" + columnProps.field + \"-\" + elementId}\n                                        source={source}\n                                        entry={value}\n                                        property={property}\n                                        applyOnBlur={true}\n                                        validateChange={self.validateFieldChange}\n                                        onChange={self.handleChangeElementField}/>;\n                    break;\n                case FIELD_TYPES.NUMBER:\n                    column = <InputNumber id={\"el-\" + columnProps.field + \"-\" + elementId}\n                                          ref={\"el-\" + columnProps.field + \"-\" + elementId}\n                                          source={source}\n                                          entry={value}\n                                          property={property}\n                                          applyOnBlur={true}\n                                          validateChange={self.validateFieldChange}\n                                          onChange={self.handleChangeElementField}/>;\n                    break;\n                default:\n                    value = ObjectUtils.getValue(elementData, columnProps.field);\n                    column = <label>{value}</label>;\n                    break;\n                // case FieldTypes.PAIR:\n                //     if (!value) {\n                //         elementData[columnProps.field] = {};\n                //     }\n                //     column = self.renderPair(elementId, columnProps, value);\n                //\n                //     break;\n            }\n\n\n            let width = columnProps.width || self.columnArea;\n            if (columnProps.field === \"MAP_KEY\") {\n                columns.push(<th key={\"el-\" + (elementKey || elementId) + \"-\" + columnProps.field}\n                                 onClick={() => {\n                                     if (self.props.onClickOnElementCallback) {\n                                         self.props.onClickOnElementCallback(value);\n                                     }\n                                 }}\n                                 width={width + \"%\"}>{column}</th>);\n            } else {\n                columns.push(<th key={\"el-\" + elementId + \"-\" + columnProps.field}\n                                 onClick={() => {\n                                     if (self.props.onClickOnElementCallback) {\n                                         self.props.onClickOnElementCallback(value);\n                                     }\n                                 }}\n                                 width={width + \"%\"}>{column}</th>);\n            }\n\n        });\n        if (this.props.set.removeData) {\n            columns.push(\n                <th key={\"el-\" + (elementKey || elementId) + \"-RemoveDataColumn\"} width=\"3%\">\n                    <a className=\"delete\" data-removeid={elementId}\n                       onClick={this.handleRemoveElement}>\n                    </a>\n                </th>\n            );\n        }\n\n        return columns;\n    }\n\n    // renderPair(elementId, columnProps, value) {\n    //     let self = this;\n    //     function renderSide(elementId, columnProps, value, side) {\n    //         let sideProps = _.cloneDeep(columnProps.pair[side]);\n    //\n    //         switch (columnProps.pair[side].type) {\n    //             case FIELD_TYPES.NUMBER:\n    //                 if (columnProps.field.indexOf(\"CONTENT\") < 0) {\n    //                     sideProps.field = columnProps.field + \".\" + sideProps.field;\n    //                 }\n    //                 return self.renderNumber({side: side, elementId: elementId}, sideProps, value[columnProps.pair[side].field]);\n    //             default:\n    //                 console.log(\"Type not defined in PAIR yet\");\n    //         }\n    //     }\n    //\n    //     let leftField = renderSide(elementId, columnProps, value, \"left\");\n    //     let rightField = renderSide(elementId, columnProps, value, \"right\");\n    //\n    //     return (\n    //         <div className=\"pair-column\">\n    //             {leftField}\n    //             {rightField}\n    //         </div>\n    //     );\n    // }\n\n    // preparePairElementIdAndSource(element, columnProps) {\n    //     let source = {field: columnProps.field};\n    //     let elementId = element;\n    //     if (element.side) {\n    //         source.elementId = element.elementId;\n    //         source.side = element.side;\n    //         elementId = element.elementId;\n    //     } else {\n    //         source.elementId = element;\n    //     }\n    //     return [elementId, source];\n    // }\n\n    // renderNumber(element, columnProps, value) {\n    //     let elementId, source;\n    //     [elementId, source] = this.preparePairElementIdAndSource(element, columnProps);\n    //\n    //     return (\n    //         <InputNumberField id={\"el-\" + columnProps.field + \"-\" + elementId}\n    //                           ref={\"el-\" + columnProps.field + \"-\" + elementId}\n    //                           value={value}\n    //                           applyOnBlur={true}\n    //                           disabled={columnProps.disabled}\n    //                           source={source}\n    //                           onChange={this.handleChangeElementField}/>\n    //     );\n    // }\n}\n\nDataSet.propTypes = {\n    id: PropTypes.string.isRequired,\n    dispatcher: PropTypes.object,\n    label: PropTypes.string,\n    dataSource: PropTypes.any.isRequired,\n    store: PropTypes.object,\n    set: PropTypes.object.isRequired,\n    onChangeCallback: PropTypes.func,\n    onClickOnElementCallback: PropTypes.func,\n    isScrollable: PropTypes.bool,\n    customKeySortFunc: PropTypes.func,\n};\n\nexport default DataSet;\n","import React from 'react';\nimport BoundComponent from \"../../core/BoundComponent\";\nimport DataSet, {SETS} from \"../../core/component/DataSet\";\nimport ReactJson from 'react-json-view';\nimport './DataSetPage.css';\n\nclass DataSetPage extends BoundComponent {\n\n    constructor(props) {\n        super(props);\n\n        this.testSubject = {\n            arrayContent: [],\n            mapContent: {},\n        };\n        this.state = {\n            arrayVersion:0,\n            mapVersion: 0\n        }\n    }\n\n    render() {\n        return (\n            <div id=\"DataSetPage\" className=\"columns\">\n                <div className=\"column is-half\">\n                    <div className=\"columns\">\n                        <div className=\"column\">\n                            <h1 className=\"title\">Array Sample</h1>\n                        </div>\n                    </div>\n                    <div className=\"columns\">\n                        <div className=\"column json-sample scroll_bar\">\n                            <ReactJson\n                                key={this.state.arrayVersion}\n                                name={\"array\"}\n                                collapsed={false}\n                                enableClipboard={false}\n                                src={this.testSubject.arrayContent}/>\n                        </div>\n                    </div>\n                    <div className=\"columns\">\n                        <div className=\"column\">\n                            <DataSet id=\"arrayDataSet\"\n                                     dataSource={this.testSubject.arrayContent}\n                                     set={SETS.ArrayTestSet}\n                                     onChangeCallback={() => {this.setState({arrayVersion: this.state.arrayVersion + 1})}}/>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"column is-half\">\n                    <div className=\"columns\">\n                        <div className=\"column\">\n                            <h1 className=\"title\">Map Sample</h1>\n                        </div>\n                    </div>\n                    <div className=\"columns\">\n                        <div className=\"column json-sample scroll_bar\">\n                            <ReactJson\n                                key={this.state.mapVersion}\n                                name={\"map\"}\n                                collapsed={false}\n                                enableClipboard={false}\n                                src={this.testSubject.mapContent}/>\n                        </div>\n                    </div>\n                    <div className=\"columns\">\n                        <div className=\"column\">\n                            <DataSet id=\"mapDataSet\"\n                                     dataSource={this.testSubject.mapContent}\n                                     set={SETS.MapTestSet}\n                                     onChangeCallback={() => {this.setState({mapVersion: this.state.mapVersion + 1})}}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default DataSetPage;","import React, {Component} from 'react'\nimport PropTypes from \"prop-types\";\n\nclass ScrollViewEntry extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            top: props.top,\n            entry: props.entry};\n        this.setTop = this.setTop.bind(this);\n    }\n\n    setTop(newTop){\n        this.setState({top: newTop})\n    }\n\n    onlyUpdateEntry(){\n        for (let ref in this.refs){\n            this.refs[ref].setState({});\n        }\n    }\n\n    render(){\n        var EntryView = this.props.entryView;\n\n        return (\n            <div key={this.props.key + \"_1\"} className={this.props.entryClass}\n                style={{height: this.props.entryHeight + 'px',\n                        width: '100%',\n                        position: 'relative',\n                        top: this.state.top}}>\n                {\n                    this.state.entry ?\n                        <EntryView ref=\"entryView\" index={this.props.index} entry={this.state.entry} properties={this.props.entryProperties}/>\n                        : \"\"\n                }\n            </div>\n        );\n    }\n}\nScrollViewEntry.propTypes = {\n    entryClass: PropTypes.string,\n    top: PropTypes.number.isRequired,\n    index: PropTypes.number.isRequired,\n    entry: PropTypes.any,\n    entryView: PropTypes.any,\n    entryProperties: PropTypes.any,\n    entryHeight: PropTypes.number,\n};\n\nexport default ScrollViewEntry;","import React, {Component} from 'react'\nimport PropTypes from \"prop-types\";\nimport ScrollViewEntry from \"./ScrollViewEntry\";\n\nclass ScrollViewContainer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleScroll = this.handleScroll.bind(this);\n        this.updateViewPortSize = this.updateViewPortSize.bind(this);\n\n        this.state = { top: undefined, viewPortRect: undefined };\n        this.lastRender = {pos: -1, top: -2};\n        this.lastTop = 0;\n    }\n\n    handleScroll(viewPortRect){\n        if (this.refs.scrollContainer){\n            this.updateViewPortSize(viewPortRect);\n        }\n    }\n\n    updateViewPortSize(viewPortRect){\n        if (this.refs.scrollContainer){\n            var rect = this.refs.scrollContainer.getBoundingClientRect();\n            this.setState({ top:rect.top, viewPortRect: viewPortRect });\n        }\n    }\n\n    onlyUpdateEntries(){\n        for (let ref in this.refs){\n            if (ref.indexOf(\"entryView_\") === 0){\n                this.refs[ref].onlyUpdateEntry({});\n            }\n        }\n    }\n\n    render() {\n\n        var list = this.props.list;\n        if (!list){\n            list = [];\n        }\n        var entryHeight = this.props.entryHeight;\n        if (!entryHeight){\n            entryHeight = 20;\n        }\n\n        var containerHeight = list.length * entryHeight;\n        if (this.props.upperContainerMargin){\n            containerHeight += this.props.upperContainerMargin;\n        }\n\n        var viewPortHeight = 0;\n        var viewPortTop = 0;\n        if (this.state.viewPortRect){\n            viewPortHeight = this.state.viewPortRect.height;\n            viewPortTop = this.state.viewPortRect.top;\n        }\n\n        var entries = [];\n        var visibleEntriesQuantity = 0;\n        if (viewPortHeight > 0 && entryHeight > 0){\n            visibleEntriesQuantity = Math.ceil(viewPortHeight/entryHeight);\n        }\n\n        var containerScrolled = 0;\n        if (this.state.top){\n            containerScrolled = viewPortTop - Number(this.state.top);\n        }\n\n        var initialRenderListPosition = 0;\n        if (containerScrolled > entryHeight){\n            initialRenderListPosition = Math.trunc(containerScrolled / entryHeight);\n        }\n\n        var scrollingState = 'Up';\n        if (this.state.top > this.lastTop){\n            scrollingState = 'Down';\n        }\n        this.lastTop = this.state.top;\n\n        if (this.lastRender.pos !== initialRenderListPosition){\n            this.lastRender.pos = initialRenderListPosition;\n            this.lastRender.top = containerScrolled;\n            if (scrollingState === \"Down\"){\n                this.lastRender.top = containerScrolled - entryHeight;\n            }\n            if (this.lastRender.top < 0){\n                this.lastRender.top = 0;\n            }\n            if (this.props.upperContainerMargin && initialRenderListPosition === 0){\n                this.lastRender.top = this.props.upperContainerMargin;\n            }\n        }\n\n        if (initialRenderListPosition > list.length && this.props.onNeedResetScroll){\n            this.props.onNeedResetScroll();\n        }\n\n        for (var i = this.lastRender.pos; i < (initialRenderListPosition + visibleEntriesQuantity); i++){\n\n            var refId = \"entryView_\"+i;\n            if (this.refs[refId]){\n                this.refs[refId].setTop(this.lastRender.top);\n            }\n            var keyId = refId;\n            if (this.props.entryRefKey && list[i]){\n                keyId = \"entryView_\" + list[i][this.props.entryRefKey]\n            }\n\n            entries.push(<ScrollViewEntry ref={refId}\n                                          key={keyId}\n                                          top={this.lastRender.top}\n                                          index={i}\n                                          entry={list[i]}\n                                          entryView={this.props.entryView}\n                                          entryProperties={this.props.entryProperties}\n                                          entryHeight={entryHeight}/>);\n        }\n\n        return (\n            <div ref=\"scrollContainer\"\n                 className={this.props.scrollContainerClass}\n                 style={{height: containerHeight + 'px'}}>\n                {entries}\n            </div>\n        );\n    }\n}\nScrollViewContainer.propTypes = {\n    scrollContainerClass: PropTypes.string,\n    entryClass: PropTypes.string,\n    list: PropTypes.array,\n    entryView: PropTypes.any,\n    entryProperties: PropTypes.any,\n    entryHeight: PropTypes.number,\n    entryRefKey: PropTypes.string,\n    upperContainerMargin: PropTypes.number,\n    onNeedResetScroll: PropTypes.func\n};\n\nexport default ScrollViewContainer;","import React from 'react'\nimport BoundComponent from \"../../BoundComponent\";\nimport PropTypes from \"prop-types\";\nimport ScrollViewContainer from './ScrollViewContainer'\n\nclass ScrollViewPort extends BoundComponent {\n\n    constructor(props) {\n        super(props);\n\n        this.handleScroll = this.handleScroll.bind(this);\n        this.updateViewPortSize = this.updateViewPortSize.bind(this);\n    }\n\n    handleScroll(e){\n        this.updateViewPortSize();\n    }\n\n    componentDidMount(){\n        this.updateViewPortSize();\n    }\n\n    componentDidUpdate(){\n        this.updateViewPortSize();\n    }\n\n    updateViewPortSize(){\n        if(this.refs.viewPort && this.refs.scrollContainer){\n            var rect =this.refs.viewPort.getBoundingClientRect();\n            this.refs.scrollContainer.updateViewPortSize(rect);\n        }\n    }\n\n    getViewPortRef(){\n        if (this.refs.viewPort)\n            return this.refs.viewPort;\n    }\n\n    handleOnNeedResetScroll(){\n\n        if (this.refs.viewPort)\n            this.refs.viewPort.scrollTop = 0;\n\n        if (this.props.onNeedResetScroll)\n            this.props.onNeedResetScroll();\n    }\n\n    onlyUpdateEntries(){\n        if (this.refs.scrollContainer)\n            this.refs.scrollContainer.onlyUpdateEntries();\n    }\n\n    render(){\n        let style = {\n            overflow: 'auto'\n        };\n        if (this.props.height){\n            style.height = this.props.height\n        }\n\n        return <div ref=\"viewPort\"\n                    className={this.props.viewPortClass}\n                    id={this.props.id}\n                    onScroll={this.handleScroll}\n                    style={style}>\n            <ScrollViewContainer ref=\"scrollContainer\"\n                                 scrollContainerClass={this.props.scrollContainerClass}\n                                 entryClass={this.props.entryClass}\n                                 list={this.props.list}\n                                 entryView={this.props.entryView}\n                                 entryHeight={this.props.entryHeight}\n                                 entryProperties={this.props.entryProperties}\n                                 entryRefKey={this.props.entryRefKey}\n                                 upperContainerMargin={this.props.upperContainerMargin}\n                                 onNeedResetScroll={this.handleOnNeedResetScroll}\n            />\n        </div>\n    }\n}\nScrollViewPort.propTypes = {\n    height: PropTypes.number,\n    viewPortClass: PropTypes.string,\n    scrollContainerClass: PropTypes.string,\n    entryClass: PropTypes.string,\n    list: PropTypes.array,\n    entryView: PropTypes.any,\n    entryProperties: PropTypes.any,\n    entryHeight: PropTypes.number,\n    entryRefKey: PropTypes.string,\n    upperContainerMargin: PropTypes.number,\n    onNeedResetScroll: PropTypes.func\n};\n\nexport default ScrollViewPort;","import React from 'react';\nimport BoundComponent from \"../../core/BoundComponent\";\nimport ScrollViewPort from '../../core/component/dynamicScroll/ScrollViewPort';\nimport PageSizeController from \"../../PageSizeController\";\nimport InputNumber from \"../../core/component/InputNumber\";\n\nconst LIST_HEIGHT_DIFF = 237;\n\nclass DynamicScrollPage extends BoundComponent {\n\n    constructor(props) {\n        super(props);\n\n        let fixedList = [];\n        this.changeListSize(fixedList, 100000);\n        let dynamicList = [];\n        this.changeListSize(dynamicList, 3);\n\n        this.dynamicListRef = undefined;\n\n        this.testSubject = {\n            dynamicList: dynamicList,\n            fixesList: fixedList,\n        };\n\n        this.state = {\n            dynamicListSize:3,\n            listHeight: PageSizeController.getCurrentPageSize().height - LIST_HEIGHT_DIFF,\n        }\n    }\n\n    changeListSize(list, newSize) {\n        if (list.length > newSize) {\n            for (var i = list.length; i > newSize; i--) {\n                list.pop();\n            }\n        } else if (list.length < newSize) {\n            for (var i = list.length; i < newSize; i++) {\n                list.push({name: \"element_\" + i});\n            }\n        }\n    }\n\n    handleChangeDynamicListSize(e) {\n        let newLength = e.target.value || 0;\n        this.changeListSize(this.testSubject.dynamicList, newLength);\n        this.setState({});\n    }\n\n    handlePageResize(e) {\n        this.setState({listHeight: e.size.height - LIST_HEIGHT_DIFF});\n    }\n\n    componentDidMount() {\n        PageSizeController.subscribe(\"DynamicScrollPage\", this.handlePageResize);\n    }\n\n    componentWillUnmount() {\n        PageSizeController.unsubscribe(\"DynamicScrollPage\");\n    }\n\n    render() {\n        return (\n            <div id=\"DataSetPage\" className=\"columns\">\n                <div className=\"column is-half\">\n                    <div className=\"columns\">\n                        <div className=\"column\">\n                            <h1 className=\"title\">Array Sample</h1>\n                        </div>\n                    </div>\n                    <div className=\"columns\">\n                        <div className=\"column is-narrow\" style={{paddingTop: \"16px\"}}>\n                            <label>Dynamic list size: </label>\n                        </div>\n                        <div className=\"column\">\n                            <InputNumber id={\"DynamicListSize\"}\n                                         entry={this.state.dynamicListSize}\n                                         applyOnBlur={true}\n                                         onChange={this.handleChangeDynamicListSize}/>\n                        </div>\n                    </div>\n                    <div className=\"columns\">\n                        <div className=\"column\">\n                            <ScrollViewPort key={this.testSubject.dynamicList.length}\n                                            ref={(ref) => {this.dynamicListRef = ref}}\n                                            viewPortClass={\"scroll_bar\"}\n                                            height={this.state.listHeight - 60}\n                                            entryHeight={30}\n                                            entryView={ListEntry}\n                                            entryProperties={{list: this.testSubject.dynamicList}}\n                                            list={this.testSubject.dynamicList}/>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"column is-half\">\n                    <div className=\"columns\">\n                        <div className=\"column\">\n                            <h1 className=\"title\">Static List (100000 Items)</h1>\n                        </div>\n                    </div>\n                    <div className=\"columns\">\n                        <div className=\"column\">\n                            <ScrollViewPort viewPortClass={\"scroll_bar\"}\n                                            height={this.state.listHeight}\n                                            entryHeight={30}\n                                            entryView={ListEntry}\n                                            entryProperties={{list: this.testSubject.fixesList}}\n                                            list={this.testSubject.fixesList}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass ListEntry extends BoundComponent {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div style={{display: \"flex\", border: \"1px black solid\", height: \"100%\"}}>\n                <div style={{flexGrow: \"1\"}}>\n                    Index: {this.props.index}\n                </div>\n                <div style={{flexGrow: \"1\"}}>\n                    Entry Name: {this.props.entry.name}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default DynamicScrollPage;","import HomePage from './pages/home/HomePage';\nimport DataSetPage from './pages/dataSet/DataSetPage';\nimport DynamicScrollPage from \"./pages/dynamicScroll/DynamicScrollPage\";\n\nconst Base_Routes = [\n    {url: \"/\", icon: \"fas fa-home\", label: \"Home\", component: HomePage, params: {exact: true}},\n    {url: \"/dataSet\", icon: \"fas fa-table\", label: \"Data Set\", component: DataSetPage, params: {exact: true}},\n    {url: \"/dynamicScroll\", icon: \"fas fa-stream\", label: \"Dynamic Scroll\", component: DynamicScrollPage, params: {exact: true}}\n];\n\nclass AppRoutes {\n\n    constructor(props) {\n        this.getRoutes = this.getRoutes.bind(this);\n    }\n\n    getRoutes() {\n        return Base_Routes;\n    }\n\n}\n\nconst appRoutes = new AppRoutes();\nexport default appRoutes;\n\n\n","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport AppRoutes from './AppRoutes';\nimport BoundComponent from \"./core/BoundComponent\";\nimport './AppNav.css'\nimport PageSizeController from \"./PageSizeController\";\n\nclass AppNav extends BoundComponent {\n    constructor(props) {\n        super(props);\n\n        this.navRef = undefined;\n\n        this.state = {\n            open: false,\n            hover: false,\n            size:  PageSizeController.getCurrentPageSize()\n        }\n    }\n\n    handlePageResize(e) {\n        this.setState(e);\n    }\n\n    componentDidMount() {\n        PageSizeController.subscribe(\"appNav\", this.handlePageResize);\n    }\n\n    componentWillUnmount() {\n        PageSizeController.unsubscribe(\"appNav\");\n    }\n\n    handleMouseClick(e) {\n\n    }\n\n    render() {\n\n        let navItems = [];\n        AppRoutes.getRoutes().forEach((item) => {\n\n            let icon = \"\";\n            if (item.icon) {\n                icon = <div className={\"icon \" + item.icon}/>;\n            }\n            navItems.push(\n                <span key={navItems.length}>\n                    <NavLink exact to={item.url} activeClassName=\"selected\">\n                        {icon} {item.label}\n                    </NavLink>\n                </span>\n            )\n        });\n\n        return (\n            <nav id=\"app-nav\"\n                 style={{height: (this.state.size.height - 150) + \"px\"}}\n                 ref={(ref) => {\n                     this.navRef = ref\n                 }}\n                 onClick={this.handleMouseClick}\n                 onMouseEnter={() => {\n                     this.setState({hover: true})\n                 }}\n                 onMouseLeave={() => {\n                     this.setState({hover: false})\n                 }}\n                 className={\"main-menu\" + (this.state.hover ? \" open\" : \"\")}>\n\n                {navItems}\n            </nav>\n        )\n    }\n}\n\nexport default AppNav;","import React from 'react';\nimport './App.css';\nimport BoundComponent from \"./core/BoundComponent\";\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport PageSizeController from './PageSizeController';\nimport AppNav from \"./AppNav\";\nimport AppRotes from './AppRoutes';\nimport {Route} from 'react-router-dom';\n\nclass App extends BoundComponent {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            size:  PageSizeController.getCurrentPageSize()\n        }\n    }\n\n    handlePageResize(e) {\n        this.setState(e);\n    }\n\n    componentDidMount() {\n        PageSizeController.subscribe(\"app\", this.handlePageResize);\n    }\n\n    componentWillUnmount() {\n        PageSizeController.unsubscribe(\"app\");\n    }\n\n    render() {\n        let routes = [];\n        AppRotes.getRoutes().forEach((route) => {\n            routes.push(<Route exact path={route.url} component={route.component}/>);\n        });\n\n        return (\n            <div id=\"main-app\"\n                 style={{\n                     width: this.state.size.width,\n                     height: this.state.size.height\n                 }}>\n                <header>\n                    <h1 className=\"title is-1\">Components</h1>\n                </header>\n                <div id=\"main-app-content\"\n                     style={{\n                         height: (this.state.size.height - 150) + \"px\"\n                     }}>\n                    <AppNav/>\n                    <div id=\"app-content-container\"\n                         className=\"scroll_bar\"\n                         style={{\n                             width: (this.state.size.width - 40) + \"px\",\n                             height: (this.state.size.height - 150) + \"px\"\n                         }}>\n                        <switch>\n                            {routes}\n                        </switch>\n                    </div>\n                </div>\n                <footer>\n\n                </footer>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport history from './history';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './core/bulma.css';\n\nReactDOM.render((\n    <BrowserRouter history={history} forceRefresh={false}>\n        <App/>\n    </BrowserRouter>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}